int main()
{
	//! в пространстве имен NODE :
	//! объявить и определить структуру node, которая содержит две переменные :
	//! int id{}
	//! node* next_node{nullptr}

	//! объявить и определить функцию bool chaining(node* n1, node* n2) таким образом :
	//! если n1->next_node не равен nullptr, вернуть false
	//! иначе присвоить адрес n2 переменной n1->next_node

	//! объявить и определить функцию bool unchaining(node* n1, node* n2) таким образом :
	//! если n1->next_node не равен &n2, вернуть false
	//! иначе присвоить nullptr переменной n1->next_node

	//! в функции main() :
	//! объявить массив NODE::node nodes[15]
	//! присвоить значения (индекс * индекс) переменным id в каждом элементе массива
	//! с помощью функции chaining() "связать" отдельно четные и нечетные элементы массива (по возрастанию)
	//! а затем "связать" максимальный четный элемент с минимальным нечетным

	//! инициализировать :
	//! NODE::node head{0, адрес первого элемента цепи},
	//! NODE::node tail{0, адрес последнего элемента цепи}

	//! вывести значения элементов массива с помощью head и tail (не используя nodes[...])

	//! с помощью функции unchaining() разбить цепочку исходных чисел (без head и tail)
	//! на 3 равные цепочки, каждая со своим head'ом (head1, head2, head3) и одним tail'ом (tail)
	//! вывести содержимое получившихся цепочек
}